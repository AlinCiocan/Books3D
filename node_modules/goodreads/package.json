{
  "name": "goodreads",
  "description": "Wrapper for the Goodreads API",
  "version": "0.0.2",
  "author": {
    "name": "Brad Dickason",
    "email": "dickason@gmail.com",
    "url": "http://braddickason.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/bdickason/node-goodreads"
  },
  "keywords": [
    "goodreads",
    "books",
    "lists"
  ],
  "dependencies": {
    "xml2js": ">= 0.1.9",
    "oauth": ">= 0.9.2",
    "coffee-script": ">= 0.0.1"
  },
  "directories": {
    "lib": "./lib/goodreads",
    "example": "./examples"
  },
  "main": ".index.js",
  "engines": {
    "node": ">= 0.2.0"
  },
  "readme": "Goodreads - Use NodeJS to tap into the Goodreads API\n-----\n\nThis is a dead simple wrapper for the Goodreads API when using NodeJS. I've only exposed a few GR API functions so far but would be happy to entertain adding more if there's demand.\n\nGoodreads API: http://goodreads.com/api\nGithub: https://github.com/bdickason/node-goodreads\nTwitter: [@bdickason](http://twitter.com/bdickason)\nE-mail: dickason@gmail.com\n\nInstallation\n======\n1. Install npm: `curl http://npmjs.org/install.sh | sh`\n2. Grab this module from npm: `npm install goodreads`\n3. Include it in your program:\n * Coffeescript: `goodreads = require 'goodreads'`\n * Javascript: `goodreads = require('goodreads');`\n4. create a new instance of the Goodreads client:\n * Coffeescript: `gr = new goodreads.client { 'key': key, 'secret': secret }`\n * Javascript: `gr = new goodreads.client({ 'key': key, 'secret': secret });`\n5. Go get a goodreads developer key/secret from http://www.goodreads.com/api/keys\n6. _(optional)_ Add your key/secret to your environment variables so Nodejs can access them\n * Key: `export GOODREADS_KEY=yourkey`\n * Secret: `export GOODREADS_SECRET=yoursecret`\n7. Try it out! Maybe do a `node examples/booklist.js` to get an idea how things work\n\nFunctions\n=====\n**getShelves** - Get all shelves for a given user\n* Input: userId\n* Output: json (as callback)\n* Example: `getShelves '4085451', (json) ->`\n  \n**getSingleShelf** - Get a specific list by ID\n* Input: userId, listId\n* Output: json (as callback)\n* Example: `getSingleShelf '4085451', 'web', (json) ->`\n\n**requestToken** - OAUTH: calls back an object with oauthToken, oauthTokenSecret, and the URL!\n* Input: none\n* Output: json `{ oauthToken: 'iu1iojij14141411414', oauthTokenSecret: 'j1kljklsajdklf132141', url: 'http://goodreads.com/blah'}`\n* Example: `requestToken (callback) ->`\n\n**processCallback** - expects: oauthToken, oauthTokenSecret, authorize (from the query string)\n_Note: call this after requestToken!_\n* Input: oauthToken, oauthTokenSecret, authorize\n* Output: json `{ 'username': 'Brad Dickason', 'userid': '404168', 'success': 1, 'accessToken': '04ajdfkja', 'accessTokenSecret': 'i14k31j41jkm' }`\n* Example: `processCallback oauthToken, oauthTokenSecret, params.query.authorize, (callback) ->`\n  \n\n_More to come!_\n\n\nHelp, I need an adult!\n======\nFirst step: Check out the `/examples` folder. It's decently documented.\n\nIf you're still having issues, you can submit them here: https://github.com/bdickason/node-goodreads/issues\n\n\nChangelog\n======\n**v0.0.2** - Removed OAuth workarounds\n* OAuth Callback (`processCallback`) now properly returns an Access Token (`accessToken`) and Access Token Secret (`accessTokenSecret`)\n\n**v0.0.1** - First release! Woohoo!!\n* Added support getting a list of a user's shelves (`getShelves`)\n* Added support for getting all books on a single shelf (`getSingleShelf`)\n* Added support for an OAuth round trip via `requestToken` and `processCallback`\n* Started this ugly manual",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/bdickason/node-goodreads/issues"
  },
  "homepage": "https://github.com/bdickason/node-goodreads",
  "_id": "goodreads@0.0.2",
  "dist": {
    "shasum": "efb42193fbe93d12c664d3a7d7e4ff0ecabd7c5f"
  },
  "_from": "goodreads@>=0.0.2",
  "_resolved": "https://registry.npmjs.org/goodreads/-/goodreads-0.0.2.tgz"
}
